@model OMCS.DAL.Model.Patient

<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
            <h4 class="modal-title" id="myModalLabel">Tạo Mới</h4>
        </div>

        @using (Ajax.BeginForm("Create", "AdminUser", FormMethod.Post,
                    new AjaxOptions
                    {
                        InsertionMode = InsertionMode.Replace,
                        HttpMethod = "POST",
                        UpdateTargetId = "list-of-user"
                    },
                    new { id = "create-form" }))
        {
            @Html.ValidationSummary(true)
            @Html.AntiForgeryToken()
            <div class="modal-body">
                <div class="form-group">
                    @Html.LabelFor(model => model.Email) <span style="color: red;">(*)</span>
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control required email" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastName) <span style="color: red;">(*)</span>
                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control required" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName) <span style="color: red;">(*)</span>
                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control required" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Gender) <span style="color: red;">(*)</span>
                    @Html.DropDownListFor(model => model.Gender, new SelectList(new List<string> { "Nam", "Nữ" }), new { @class = "form-control" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Birthday) <span style="color: red;">(*)</span>
                    @Html.TextBoxFor(model => model.Birthday, "{0:dd-MM-yyyy}", new { type = "date", @class = "form-control datepicker required" })                  
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Phone) <span style="color: red;">(*)</span>
                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control required" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PrimaryAddress) <span style="color: red;">(*)</span>
                    @Html.TextBoxFor(model => model.PrimaryAddress, new { @class = "form-control required" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SecondaryAddress)
                    @Html.TextBoxFor(model => model.SecondaryAddress, new { @class = "form-control" })
                </div>
            </div>
            <div class="modal-footer">
                <button type="submit" class="btn btn-primary">Lưu</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal">Bỏ qua</button>
            </div>
        }
    </div>
</div>

<script type="text/javascript">
    $(function () {
        $("#create-form").validate({
            rules: {
                Email: {
                    remote: {
                        url: "@Url.Action("CheckExistEmail", "AdminUser")",
                        timeout: 5000,
                        type: "POST"
                    },
                    maxlength: 50
                },
                Email: {
                    remote: {
                        url: "@Url.Action("CheckExistEmail", "AdminUser")",
                        timeout: 5000,
                        type: "POST"
                    },
                    maxlength: 50
                },
                FirstName: {
                    maxlength: 50
                },
                LastName: {
                    maxlength: 50
                },
                Password: {
                    rangelength: [6, 32]
                },
                RePassword: {
                    rangelength: [6, 32]
                }
            },
            messages: {
                Email: {
                    remote: "Địa chỉ email đã tồn tại"
                }
            }
        });
    });
</script>

